["playdate"]
argv = "string[]" # If the simulator is launched from the command line, any extra arguments passed there are available in the playdate.argv array.
isSimulator = "boolean"

["playdate.display"]

["playdate.easingFunctions"]

["playdate.file"]

["playdate.file.file"] # TODO: Check for fields

["playdate.frameTimer"]
delay = "integer"
discardOnCompletion = "boolean"
duration = "integer"
frame = "integer"
repeats = "boolean"
reverses = "boolean"
timerEndedArgs = "any[]"

["playdate.geometry"]

["playdate.geometry.arc"]
x = "integer"
y = "integer"
radius = "integer"
startAngle = "number"
endAngle = "number"
direction = "boolean"

["playdate.geometry.affineTransform"]

["playdate.geometry.lineSegment"]
x1 = "integer"
y1 = "integer"
x2 = "integer"
y2 = "integer"

["playdate.geometry.point"]
x = "number"
y = "number"

["playdate.geometry.polygon"]

["playdate.geometry.rect"]
x = "number"
y = "number"
width = "number"
height = "number"
top = "number" # Read-only
bottom = "number" # Read-only
left = "number" # Read-only
right = "number" # Read-only
size = "playdate.geometry.size" # Read-only

["playdate.geometry.size"]
width = "number"
height = "number"

["playdate.geometry.vector2D"]
dx = "number"
dy = "number"

["playdate.graphics"]

["playdate.graphics.animation.loop"]
delay = "number"
startFrame = "integer"
endFrame = "integer"
frame = "integer"
step = "integer"
shouldLoop = "boolean"
paused = "boolean"

["playdate.graphics.animation.blinker"]
onDuration = "integer"
offDuration = "integer"
loop = "boolean"
cycles = "integer"
default = "boolean"
counter = "integer"
on = "boolean"
running = "boolean"

["playdate.graphics.animator"]
repeatCount = "integer"
reverses = "integer"
easingAmplitude = "number"
easingPeriod = "number"
s = "number|nil"
a = "number|nil"
p = "number|nil"

["playdate.graphics.font"]

["playdate.graphics.image"]
x = "integer"
y = "integer"
width = "integer"
height = "integer"

["playdate.graphics.imagetable"] # TODO: Check for fields

["playdate.graphics.nineSlice"]
innerRect = "playdate.geometry.rect" # Read-only: The inner rectangle of the nine slice.
minWidth = "integer" # Read-only: The minimum width of the nine slice.
minHeight = "integer" # Read-only: The minimum height of the nine slice.

["playdate.graphics.sprite"]
x = "integer"
y = "integer"
width = "integer"
height = "integer"
# TODO: collisionType
# collisionResponse = "integer|collisionType|fun(self: playdate.graphics.sprite, other: playdate.graphics.sprite): collisionType|nil"
collisionResponse = "integer|fun(self: playdate.graphics.sprite, other: playdate.graphics.sprite): integer|nil"
update = "fun()|nil"

["playdate.graphics.tilemap"]

["playdate.graphics.video"]

["playdate.inputHandlers"]

["playdate.keyboard"]
text = "string"

["playdate.metadata"]
name = "string"
author = "string"
description = "string"
bundleID = "string"
version = "string"
buildNumber = "integer"
imagePath = "string|nil"
launchSoundPath = "string|nil"
pdxversion = "integer" # 20000
contentWarning = "string|nil"
contentWarning2 = "string|nil"

["playdate.menu"]

["playdate.menu.item"]
title = "string"
value = "integer|boolean|string"

["playdate.pathfinder"]

["playdate.pathfinder.graph"]

["playdate.pathfinder.node"]

["playdate.simulator"]

["playdate.sound"]

["playdate.sound.bitcrusher: playdate.sound.effect"]

["playdate.sound.channel"]

["playdate.sound.controlsignal"]
events = "ControlSignalEvent[]" # TODO: Fix upstream: should be instance variable (is class)

["playdate.sound.delayline: playdate.sound.effect"]

["playdate.sound.delaylinetap: playdate.sound.source"]

["playdate.sound.effect"]

["playdate.sound.envelope"]

["playdate.sound.fileplayer: playdate.sound.source"]

["playdate.sound.instrument: playdate.sound.source"]

["playdate.sound.lfo"]

["playdate.sound.onepolefilter: playdate.sound.effect"]

["playdate.sound.overdrive: playdate.sound.effect"]

["playdate.sound.ringmod: playdate.sound.effect"]

["playdate.sound.sample"]

["playdate.sound.sampleplayer: playdate.sound.source"]

["playdate.sound.sequence"]

["playdate.sound.source"]

["playdate.sound.synth: playdate.sound.source"]

["playdate.sound.track"]

["playdate.sound.twopolefilter: playdate.sound.effect"]

["playdate.sound.micinput"]

["playdate.string"]

["playdate.systeminfo"] # Undocumented. Observed values listed below
buildtime = "string" # "20230706_121810"
commit = "string" # "f5a85fc69f11-2.0.1-release.156292-buildbot"
pdxcompatversion = "integer" # 10000
pdxversion = "integer" # 20000

["playdate.timer"]
currentTime = "integer" # read-only
delay = "integer"
discardOnCompletion = "boolean"
duration = "integer"
timeLeft = "integer" # read-only
repeats = "boolean"
reverses = "boolean"
timerEndedArgs = "any[]"

["playdate.ui"]

["playdate.ui.crankIndicator"]
clockwise = "boolean"

["playdate.ui.gridview"]
needsDisplay = "boolean" # read-only
backgroundImage = "playdate.graphics.image|playdate.graphics.nineSlice"
isScrolling = "boolean" # read-only
scrollEasingFunction = "fun(t:number, b:number, c:number, d:number, a?:number, p?:number): number"
easingAmplitude = "number|nil"
easingPeriod = "number|nil"
changeRowOnColumnWrap = "boolean"
scrollCellsToCenter = "boolean"

###########################################################################
# These exists no where in the playdate.* namespace but are the shapes of
# classes/objects/tables passed as parameters to functions and return values

["CollisionData"] # returned from sprite:moveWithCollisions and sprite:checkCollisions
sprite = "playdate.graphics.sprite"
other = "playdate.graphics.sprite"
type = "integer" # TODO: CollisionType
overlaps = "boolean"
ti = "number" # 0.0-1.0
move = "playdate.geometry.vector2D"
normal = "playdate.geometry.vector2D"
touch = "playdate.geometry.point"
spriteRect = "playdate.geometry.rect"
otherRect = "playdate.geometry.rect"
bounce = "playdate.geometry.point|nil"
slide = "playdate.geometry.point|nil"

["CollisionInfo"] # returned from playdate.graphics.sprite.querySpriteInfoAlongLine
sprite = "playdate.graphics.sprite"
entryPoint = "playdate.geometry.point"
exitPoint = "playdate.geometry.point"
t1 = "number"
t2 = "number"

["DateTime"] # returned by playdate.getTime() and playdate.getGMTTime()
year = "integer" # 4-digit year
month = "integer" # month of the year 1-12
day = "integer" # day of the month 1-31
weekday = "integer" # day of the week, where 1 is Monday and 7 is Sunday
hour = "integer" # hour 0-23
minute = "integer" # minute 0-59
second = "integer" # second 0-59 (or 60 on a leap second)
millisecond = "integer" # millisecond 0-999

["InputHandler"]
AButtonDown = "fun()|nil"
AButtonHeld = "fun()|nil"
AButtonUp = "fun()|nil"
BButtonDown = "fun()|nil"
BButtonHeld = "fun()|nil"
BButtonUp = "fun()|nil"
downButtonDown = "fun()|nil"
downButtonUp = "fun()|nil"
leftButtonDown = "fun()|nil"
leftButtonUp = "fun()|nil"
rightButtonDown = "fun()|nil"
rightButtonUp = "fun()|nil"
upButtonDown = "fun()|nil"
upButtonUp = "fun()|nil"
cranked = "fun(change:number, acceleratedChange:number)|nil"

[Object] # TODO: Document Object and `class()` global function
#class(ClassName, ["properties], [namespace"]).extends(ParentClass)

[PowerStatus]
charging = "boolean"
USB = "boolean"
screws = "boolean"

[SystemStats] # Returned from playdate.getStats(); Note the leding spaces on keys. Device only.
" kernel" = "number"
" game" = "number"
" audio" = "number"

[ModTime] # second level accuracy time.  Used by playdate.file.modtime
year = "integer" # 4-digit year
month = "integer" # month of the year 1-12
day = "integer" # day of the month 1-31
hour = "integer" # hour 0-23
minute = "integer" # minute 0-59
second = "integer" # second 0-59 (or 60 on a leap second)

[SoundTrackNoteIn] # This can be used for playdate.sound.track:addNote
step = "integer"
note = "number|string" # midi note number or note name like "Db3"
length = "integer"
velocity = "number"

[SoundTrackNoteOut] # This is what comes back from playdate.sound.track:getNote
step = "integer"
note = "number" # always midi note number
length = "integer"
velocity = "number"

[ControlSignalEvent]
step = "integer"
value = "number"
interpolate = "boolean|nil" # TODO: Get this documented upstream
